---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import Footer from '../components/Footer.astro';
import AppCard from '../components/AppCard.astro';
import AppFilters from '../components/AppFilters.astro';
import { getAllApps } from '../services/appService';
import AppCardSkeleton from '../components/AppCardSkeleton.astro';
import StayUpdated from '../components/StayUpdated.astro';

const allApps = await getAllApps();

const featuredApps = allApps.filter(app => app.featured)
  .sort((a, b) => (a.sort_order || 999) - (b.sort_order || 999));

const regularApps = allApps.filter(app => !app.featured)
  .sort((a, b) => (a.sort_order || 999) - (b.sort_order || 999));

const newAppsCount = regularApps.filter(app => 
  new Date(app.created_at!) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
).length;
---

<Layout 
  title="Mac App Directory"
  description="Discover the best Mac apps for every need. Our curated directory features ${allApps.length}+ hand-picked macOS applications across ${new Set(allApps.map(app => app.category)).size} categories. Find your next favorite Mac app today."
  type="website"
  image="/socialshare.png"
  keywords={[
    'mac apps',
    'macos applications',
    'best mac software',
    'mac app directory',
    'productivity apps mac',
    'mac development tools',
    'creative apps macos',
    'mac utilities',
    ...Array.from(new Set(allApps.map(app => app.category.toLowerCase()))).map(cat => `${cat} mac apps`)
  ]}
>
  <Header />
  <Hero />
  
  <main class="max-w-6xl mx-auto px-6 sm:px-8 pt-4 pb-8">
    <AppFilters totalApps={regularApps.length} newAppsCount={newAppsCount} />

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
      <!-- Featured apps section -->
      {featuredApps.map(app => (
        <div class="featured-app">
          <AppCard app={app} />
        </div>
      ))}
      
      <!-- Regular apps section -->
      <div class="contents col-span-full">
        <div id="skeleton-container" class="contents">
          {[...Array(6)].map(() => (
            <AppCardSkeleton />
          ))}
        </div>

        <div id="regular-apps-container" class="contents opacity-0">
          {regularApps.map(app => (
            <div 
              class="regular-app"
              data-sort-order={app.sort_order || 999}
            >
              <AppCard app={app} />
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>

  <StayUpdated 
    totalApps={allApps.length} 
    newAppsCount={newAppsCount} 
  />

  <Footer />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skeletonContainer = document.getElementById('skeleton-container');
    const regularContainer = document.getElementById('regular-apps-container');

    if (skeletonContainer && regularContainer) {
      setTimeout(() => {
        skeletonContainer.style.opacity = '0';
        setTimeout(() => {
          skeletonContainer.style.display = 'none';
          regularContainer.style.opacity = '1';
          
          // Simple reveal all apps at once
          document.querySelectorAll('.regular-app').forEach(app => {
            app.classList.add('visible');
          });
        }, 300);
      }, 600);
    }
  });

  class AppFilterManager {
    private container: HTMLElement | null;
    private allCards: HTMLElement[];
    private currentFilter: string = 'all';
    private isAnimating: boolean = false;
    
    constructor() {
      this.container = document.getElementById('regular-apps-container');
      this.allCards = Array.from(document.querySelectorAll('.regular-app'));
      this.init();
    }

    private init() {
      this.listenToFilterChanges();
    }

    private listenToFilterChanges() {
      document.addEventListener('filterChanged', ((e: CustomEvent) => {
        const { filter, searchQuery } = e.detail;
        
        if (this.isAnimating) return;
        
        this.currentFilter = filter;
        this.handleFilterChange(filter, searchQuery);
      }) as EventListener);
    }

    private async handleFilterChange(filter: string, searchQuery: string = '') {
      this.isAnimating = true;

      let visibleCards: HTMLElement[];

      switch (filter) {
        case 'search':
          visibleCards = this.handleSearch(searchQuery);
          break;
        case 'latest':
          visibleCards = this.getLatestApps();
          break;
        case 'all':
        default:
          visibleCards = [...this.allCards];
          break;
      }

      visibleCards = this.sortCards(visibleCards, filter);
      await this.updateDisplay(visibleCards);
      
      setTimeout(() => {
        this.isAnimating = false;
      }, 350);
    }

    private sortCards(cards: HTMLElement[], filter: string): HTMLElement[] {
      return cards.sort((a, b) => {
        const aCard = a.querySelector('.app-card');
        const bCard = b.querySelector('.app-card');
        if (!aCard || !bCard) return 0;

        if (filter === 'latest') {
          const aDate = new Date(aCard.getAttribute('data-created-at') || '');
          const bDate = new Date(bCard.getAttribute('data-created-at') || '');
          return bDate.getTime() - aDate.getTime(); // Most recent first
        } else {
          const aOrder = parseInt(aCard.getAttribute('data-sort-order') || '999');
          const bOrder = parseInt(bCard.getAttribute('data-sort-order') || '999');
          return aOrder - bOrder; // Sort by order for all and search
        }
      });
    }

    private async updateDisplay(visibleCards: HTMLElement[]) {
      if (!this.container) return;
      
      this.container.innerHTML = '';

      if (visibleCards.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'col-span-full text-center py-8 text-gray-500 dark:text-gray-400';
        noResults.textContent = 'No apps found';
        this.container.appendChild(noResults);
        return;
      }

      visibleCards.forEach(card => {
        card.classList.remove('visible');
        this.container?.appendChild(card);
        
        requestAnimationFrame(() => {
          card.classList.add('visible');
        });
      });
    }

    private handleSearch(query: string): HTMLElement[] {
      if (!query.trim()) return [...this.allCards];

      const searchTerms = query.toLowerCase().trim().split(/\s+/);
      return this.allCards.filter(card => {
        const appCard = card.querySelector('.app-card');
        if (!appCard) return false;

        const searchableText = [
          appCard.getAttribute('data-app-name'),
          appCard.getAttribute('data-app-description'),
          appCard.getAttribute('data-app-category')
        ].map(text => text?.toLowerCase() || '').join(' ');

        return searchTerms.every(term => searchableText.includes(term));
      });
    }

    private getLatestApps(): HTMLElement[] {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

      return this.allCards.filter(card => {
        const appCard = card.querySelector('.app-card');
        if (!appCard) return false;

        const createdAt = appCard.getAttribute('data-created-at');
        if (!createdAt) return false;

        return new Date(createdAt) > sevenDaysAgo;
      });
    }
  }

  // Initialize AppFilterManager only after initial loading animation is complete
  setTimeout(() => {
    new AppFilterManager();
  }, 1200); // Increased delay to ensure initial animation is complete
</script>

<style>
  .featured-app {
    opacity: 1;
  }

  .regular-app {
    opacity: 0;
    transform: translateY(25px);
    filter: brightness(0.8);
    transition: 
      all 0.75s cubic-bezier(0.165, 0.84, 0.44, 1);
    will-change: transform, opacity;
    border-radius: inherit;
  }

  .regular-app.visible {
    opacity: 1;
    transform: translateY(0);
    filter: brightness(1);
  }

  #regular-apps-container {
    transition: opacity 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  #skeleton-container {
    transition: opacity 0.3s ease-out;
  }

  @media (prefers-reduced-motion: reduce) {
    .regular-app {
      transition: opacity 0.4s ease-out;
      transform: none;
      box-shadow: none;
      filter: none;
    }
    .regular-app.visible {
      transform: none;
      box-shadow: none;
    }
  }

  .contents {
    display: contents;
  }
</style>